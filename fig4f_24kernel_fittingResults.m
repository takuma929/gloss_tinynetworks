%--------------------------------------------------------------------------
% This script generates Figure 4f for the manuscript,
% by creating scatter plots of parameters fitted to each of the 24
% learned kernels from the one-layer model.
% It:
% - Loads Gaussian and ridge fit parameters for each kernel,
% - Defines consistent plot layouts, colors, and axis ranges for each parameter,
% - Plots amplitudes, standard deviations, and orientation angles for
%   all kernels (with jitter and paired linking where appropriate),
% - Saves each parameter plot as a vector PDF in 'figs' directory.
%
% Author: TM, 2025
%--------------------------------------------------------------------------
clearvars; close all;

disp('Generating figure 4f...')

%% Load configuration
load(fullfile('data','fig_parameters'))  % Loads `fontsize`, `twocolumn`, etc.
paramTable = readtable(fullfile('data','gauss_ridge_parameters_kernel24.csv'));

%% Define plotting parameters for each subplot
% Structure per parameter: axis limits, ticks, labels, color maps, etc.
plotConfig.amp = struct( ...
    'xmin', 0.7, ...
    'xmax', 1.3, ...
    'ymin', 0.0, ...
    'ymax', 1.0, ...
    'y_ticks', {0:0.5:1}, ...
    'y_tick_labels', {{'0.00','0.50','1.00'}}, ...
    'xlabel', 'a_g', ...
    'cmap', 'b', ...
    'bgcolor', {[241 241 252]/255} ...
);

plotConfig.sxsy = struct( ...
    'xmin', 0.5, ...
    'xmax', 2.5, ...
    'ymin', 0.0, ...
    'ymax', 1.8, ...
    'y_ticks', {0:0.9:1.8}, ...
    'y_tick_labels', {{'0.00','0.90','1.80'}}, ...
    'xlabel', '\sigma_{g_x}  \sigma_{g_y}', ...
    'cmap', 'b', ...
    'bgcolor', {[241 241 252]/255} ...
);

plotConfig.aR1aR2 = struct( ...
    'xmin', 0.5, ...
    'xmax', 2.5, ...
    'ymin', 0.0, ...
    'ymax', 1.0, ...
    'y_ticks', {0:0.5:1}, ...
    'y_tick_labels', {{'0.00','0.50','1.00'}}, ...
    'xlabel', 'a_{R1}  a_{R2}', ...
    'cmap', {[229 110 22]/255}, ...
    'bgcolor', {[246 239 234]/255} ...
);

plotConfig.sR1sR2 = struct( ...
    'xmin', 0.5, ...
    'xmax', 2.5, ...
    'ymin', 0.0, ...
    'ymax', 1.8, ...
    'y_ticks', {0:0.9:1.8}, ...
    'y_tick_labels', {{'0.00','0.90','1.80'}}, ...
    'xlabel', '\sigma_{R1}  \sigma_{R2}', ...
    'cmap', {[229 110 22]/255}, ...
    'bgcolor', {[246 239 234]/255} ...
);

plotConfig.pR1pR2 = struct( ...
    'xmin', 0.5, ...
    'xmax', 2.5, ...
    'ymin', 0.0, ...
    'ymax', 180, ...
    'y_ticks', {0:45:180}, ...
    'y_tick_labels', {{'0','45','90','135','180'}}, ...
    'xlabel', '\phi_{R1}  \phi_{R2}', ...
    'cmap', {[229 110 22]/255}, ...
    'bgcolor', {[246 239 234]/255} ...
);

%% Iterate through each parameter type
for param = {'amp','sxsy','aR1aR2','sR1sR2','pR1pR2'}
    pname = param{1};
    cfg = plotConfig.(pname);

    % Extract parameter values
    switch pname
        case 'amp'
            p = paramTable.amp;
        case 'sxsy'
            p = [paramTable.sx, paramTable.sy];
        case 'aR1aR2'
            p = reorderPairs([paramTable.amp1, paramTable.amp2]);
            p(p == 0) = -1;
        case 'sR1sR2'
            p = reorderPairs([paramTable.sigma1, paramTable.sigma2]);
            p(p == 0) = -1;
        case 'pR1pR2'
            p = reorderPairs([paramTable.phi1_deg, paramTable.phi2_deg]);
            p(p == 180) = -1;
    end

    % Create figure
    fig = figure; ax = gca; hold on;
    fig.Units = 'centimeters';
    fig.Color = 'w';
    fig.InvertHardcopy = 'off';
    ax.Units = 'centimeters';

    % Jitter x positions to reduce overlap
    shift = 0.2 * (rand(size(p,1),1) - 0.5);

    if strcmp(pname, 'amp')
        % Single-value scatter
        scatter(ones(length(p),1)+shift, p, 20, cfg.cmap, ...
            'o', 'filled', 'LineWidth', 0.25, ...
            'MarkerFaceAlpha', 0.5, 'MarkerEdgeColor', [1 1 1]);
        fig.Position = [10, 10, figp.twocolumn/16, figp.twocolumn/5];
        ax.Position = [0.7 0.55 0.6 2.9];
    else
        % Paired values with line
        for N = 1:size(p,1)
            if all(p(N,:) > 0)
                line([1,2] + shift(N), p(N,:), 'Color', [0 0 0], 'LineWidth', 0.1);
            end
        end
        scatter(1 + shift, p(:,1), 20, cfg.cmap, ...
            'o', 'filled', 'LineWidth', 0.25, ...
            'MarkerFaceAlpha', 0.5, 'MarkerEdgeColor', [1 1 1]);
        scatter(2 + shift, p(:,2), 20, cfg.cmap, ...
            'o', 'filled', 'LineWidth', 0.25, ...
            'MarkerFaceAlpha', 0.5, 'MarkerEdgeColor', [1 1 1]);

        fig.Position = [10, 10, figp.twocolumn/8, figp.twocolumn/5];
        ax.Position = [0.7 0.55 1.2 2.9];
    end

    % Set axes properties
    xlim([cfg.xmin, cfg.xmax]);
    ylim([cfg.ymin, cfg.ymax]);
    xticks([]);
    yticks(cfg.y_ticks);
    ax.YTickLabel = cfg.y_tick_labels;
    ax.XTickLabel = {''};
    xlabel(cfg.xlabel);
    ylabel('');
    ax.FontName = 'Arial';
    ax.FontSize = figp.fontsize;
    ax.Color = cfg.bgcolor;
    ax.XColor = 'k'; ax.YColor = 'k';
    ax.LineWidth = 0.5;
    ticklengthcm(ax, 0.0);
    axis xy;

    if strcmp(pname, 'pR1pR2')
        grid on;
    else
        grid off;
    end

    box off;

    % Save figure
    exportgraphics(fig, fullfile('figs', ['fig4f(kernel24_', pname, ').pdf']), 'ContentType', 'vector');
end

disp('Done.')
close all

%% Utility Function: Reorder value pairs (e.g., amp1 vs amp2) to enforce consistent ordering
function p_out = reorderPairs(p_in)
    p_out = p_in;
    mask = (p_out(:,2) ~= 0) & (p_out(:,1) > p_out(:,2));
    if any(mask)
        p_out(mask, :) = p_out(mask, [2, 1]);
    end
end
